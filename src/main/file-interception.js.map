{"version":3,"file":"file-interception.js","sourceRoot":"","sources":["file-interception.ts"],"names":[],"mappings":"AAAA,SAAS;AACT,OAAO,KAAK,IAAI,MAAM,MAAM,CAAA;AAE5B,WAAW;AACX,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAA;AAEnC,MAAM,UAAU,GAAG,SAAS,CAAA;AAC5B,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,CAAA;AAC9D,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAA;AAChE,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAA;AAClE,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAA;AAE9C,oBAAoB,GAAW;IAC7B,OAAO,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;AAClF,CAAC;AAED,MAAM,SAAS,GAAG,GAAG,EAAE;IACrB,QAAQ,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE;QAC3D,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,OAAO,CAAA;QAC/B,QAAQ,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;IAC3B,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE;QAC3D,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAE/C,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QACrB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;SAC5C;QACD,4DAA4D;QAC5D,wDAAwD;QACxD,gDAAgD;QAChD,GAAG,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAA;QAE7B,QAAQ,CAAC,GAAG,CAAC,CAAA;IACf,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,eAAe,SAAS,CAAA","sourcesContent":["// Native\nimport * as path from 'path'\n\n// Packages\nimport { protocol } from 'electron'\n\nconst MainFolder = __dirname\nconst RendererFolder = path.resolve(MainFolder, '../renderer')\nconst NextFolder = path.join(RendererFolder, '_next') + path.sep\nconst ErrorFolder = path.join(RendererFolder, '_error') + path.sep\nconst isWindows = process.platform === 'win32'\n\nfunction resolveURL(url: string): string {\n  return url.replace(/^\\/_next\\//, NextFolder).replace(/^\\/_error\\//, ErrorFolder)\n}\n\nconst intercept = () => {\n  protocol.interceptHttpProtocol('http', (request, callback) => {\n    const { method, url } = request\n    callback({ method, url })\n  })\n\n  protocol.interceptFileProtocol('file', (request, callback) => {\n    let url = request.url.substr(isWindows ? 8 : 7)\n\n    url = resolveURL(url)\n    if (isWindows) {\n      url = url.replace(path.parse(url).root, '')\n    }\n    // Electron doesn't like anything in the path to be encoded,\n    // so we need to undo that. This specifically allows for\n    // Electron apps with spaces in their app names.\n    url = decodeURIComponent(url)\n\n    callback(url)\n  })\n}\n\nexport default intercept\n"]}