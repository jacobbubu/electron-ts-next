{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["// Native\nimport * as path from 'path'\nimport { format as formatUrl } from 'url'\n\n// Packages\nimport { app, BrowserWindow, ipcMain, globalShortcut } from 'electron'\nimport isDev from 'electron-is-dev'\nimport prepareNext from 'electron-next'\n\n// Utils\nimport fileIntercept from './file-interception'\n\nlet mainWindow: Electron.BrowserWindow | undefined\n\nfunction createMainWindow() {\n  // Create the browser window.\n  const window = new BrowserWindow({\n    height: 600,\n    width: 800,\n    webPreferences: {\n      nodeIntegration: false,\n      preload: path.resolve(__dirname, 'preload.js')\n    }\n  })\n\n  console.log('isDev', isDev)\n  if (!isDev) {\n    fileIntercept()\n  }\n\n  globalShortcut.register('CommandOrControl+R', function() {\n    console.log('CommandOrControl+R is pressed')\n    window.reload()\n  })\n\n  const url = isDev\n    ? 'http://localhost:8000/home'\n    : formatUrl({\n        pathname: path.join(__dirname, '../renderer/home/index.html'),\n        protocol: 'file:',\n        slashes: true\n      })\n\n  window.loadURL(url)\n\n  // Emitted when the window is closed.\n  window.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = undefined\n  })\n\n  window.webContents.on('devtools-opened', () => {\n    window.focus()\n    setImmediate(() => {\n      window.focus()\n    })\n  })\n\n  window.webContents.toggleDevTools()\n\n  return window\n}\n\n// quit application when all windows are closed\napp.on('window-all-closed', () => {\n  // on macOS it is common for applications to stay open until the user explicitly quits\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  // on macOS it is common to re-create a window even after all windows have been closed\n  if (!mainWindow) {\n    mainWindow = createMainWindow()\n  }\n})\n\n// create main BrowserWindow when electron is ready\napp.on('ready', async () => {\n  if (isDev) {\n    await prepareNext({ development: './src/renderer', production: './app/app/renderer' })\n  }\n\n  mainWindow = createMainWindow()\n})\n\n// listen the channel `message` and resend the received message to the renderer process\nipcMain.on('message', (event: Electron.Event, message: string) => {\n  event.sender.send('message', message)\n})\n"]}