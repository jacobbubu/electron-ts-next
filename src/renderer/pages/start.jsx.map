{"version":3,"file":"start.jsx","sourceRoot":"","sources":["start.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,MAAM,CAAC,OAAO,MAAO,SAAQ,KAAK,CAAC,SAAS;IAA5C;;QACE,UAAK,GAAG;YACN,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,IAAI;SACd,CAAA;QAaD,kBAAa,GAAG,CAAC,KAAY,EAAE,OAAe,EAAE,EAAE;YAChD,yEAAyE;YACzE,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,CAAA;QAC5B,CAAC,CAAA;QAED,iBAAY,GAAG,CAAC,KAAU,EAAE,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;QAC9C,CAAC,CAAA;QAED,iBAAY,GAAG,CAAC,KAAU,EAAE,EAAE;YAC5B,KAAK,CAAC,cAAc,EAAE,CAAA;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACpD,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;QAClC,CAAC,CAAA;IAeH,CAAC;IAvCC,iBAAiB;QACf,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,CAAA;QACzC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAA;IACtD,CAAC;IAED,oBAAoB;QAClB,qCAAqC;QACrC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAA;IAClE,CAAC;IAiBD,MAAM;QACJ,OAAO,CACL,CAAC,GAAG,CACF;QAAA,CAAC,EAAE,CAAC,eAAe,EAAE,EAAE,CAEvB;;QAAA,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAElD;;QAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAChC;UAAA,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,EACjD;QAAA,EAAE,IAAI,CACR;MAAA,EAAE,GAAG,CAAC,CACP,CAAA;IACH,CAAC;CACF","sourcesContent":["import React from 'react'\n\nexport default class extends React.Component {\n  state = {\n    input: '',\n    message: null\n  }\n\n  componentDidMount() {\n    // start listening the channel message\n    console.log('global', global.ipcRenderer)\n    global.ipcRenderer.on('message', this.handleMessage)\n  }\n\n  componentWillUnmount() {\n    // stop listening the channel message\n    global.ipcRenderer.removeListener('message', this.handleMessage)\n  }\n\n  handleMessage = (event: Event, message: string) => {\n    // receive a message from the main process and save it in the local state\n    this.setState({ message })\n  }\n\n  handleChange = (event: any) => {\n    this.setState({ input: event.target.value })\n  }\n\n  handleSubmit = (event: any) => {\n    event.preventDefault()\n    global.ipcRenderer.send('message', this.state.input)\n    this.setState({ message: null })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello Electron!</h1>\n\n        {this.state.message && <p>{this.state.message}</p>}\n\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" onChange={this.handleChange} />\n        </form>\n      </div>\n    )\n  }\n}\n"]}